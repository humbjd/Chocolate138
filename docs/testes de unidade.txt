TESTE DE UNIDADE

Criar scripts que testem métodos e funções
"Código que testa código"

Muitas pessoas sabem apenas fazer testes individuais

Existe uma forma melhor de executar muitiplus testes variando seus valores
É chamado de DDT - Data Driven Testing = Test Direcionado por Dados

Normalmente, os testes de unidade são criados após a programação

Existe uma forma de organização do trabalho que inverte isso.
Primeiro completam os testes e depois a programação.

Em uma Sprint, na manha da 1º segunda-feira, nós conversamos sobre o que será construído.
De tarde, O PO e o QA se reunem para definir os critérios de aceite (Dado-Quando-Então).
Enquanto isso, os dev montam o esqueleto do código, voltando um resultado fixo.

Exemplo:
Na reunião, ficou denifido que nessa sprint nos contruiiriamos 4 funções de cálculo de áreas:
 public double calcularQuadrado(double lado){ return 0; }
 public double calcularRetangulo(double largura, double comprimento){ return 0; }
 public double calcularTrinagulo(double largura, double comprimento){ return 0; }
 public double calcularCirculo(double raio){ return 0; }


 Nos dias seguintes, conforme os devs completem o código,
 os testes vão começar a passar.

 Teste funcionando é uma medida do progresso do software

 No TDD, quando executamos a bateria de testes?
 - R: Uma vez por dia ou quando há um novo build

 Esse processo pode evoluir para um processo de Integração Continua (CI)

 Devs                     Passou            Passou
 Ambiente ------> Release ------> Ambiente ------> Ambiente
de Desenvolvimento                de Teste         de Produção

            Integração Continua
                    Entrega Continua (CD) --> Esteira / Pipeline




